---
title: "D3.js in Quarto"
format:
  html:
    code-fold: true
jupyter: python3
---

# D3 
>📚 [Tutorial](https://observablehq.com/@d3/learn-d3) 

To use D3 in an {ojs} cell, first import it using the require function (which loads modules hosted at jsDelivr):

# Basics

```{ojs}
thisMakesSenseSoFar = true;
fruit = [{ kind: "grape", color: "red", quantity: 12, tasty: true}];
fruit[].color;
svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto; height: intrinsic;")
      .attr("fill", "red");
svg.node();
```

# Histogram
```{ojs}
d3 = require("d3@7")
import {Histogram} from "@d3/histogram"

data = {
  const text = await FileAttachment("temperature.csv").text();
  const parseDate = d3.utcParse("%Y-%m-%d");
  return d3.csvParse(text, ({date, temperature}) => ({
    date: parseDate(date),
    temperature: +temperature
  }));
}

d3.extent(data, d => d.date);
height = 200;
Histogram(data, {value: d => d.temperature, width, height});
```

# Learn D3: Scales
```{ojs}
import {Legend} from "@d3/color-legend";
width = 640;
margin = ({top: 20, right: 0, bottom: 0, left: 30});



fruits = [
  {name: "🍊", count: 21},
  {name: "🍇", count: 13},
  {name: "🍏", count: 8},
  {name: "🍌", count: 5},
  {name: "🍐", count: 3},
  {name: "🍋", count: 2},
  {name: "🍎", count: 1},
  {name: "🍉", count: 1}
];

fruits.map(d => d.count); // the count dimension (quantitative)

x = d3.scaleLinear()
    .domain([0, d3.max(fruits, d => d.count)])
    .range([margin.left, width - margin.right])
    .interpolate(d3.interpolateRound)

y = d3.scaleBand()
    .domain(fruits.map(d => d.name))
    .range([margin.top, height - margin.bottom])
    .padding(0.1)
    .round(true);

```